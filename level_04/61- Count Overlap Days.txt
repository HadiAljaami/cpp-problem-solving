/*Write a program to read a tow periods then count overlap days?*/

#include<iostream>
using namespace std;

enum enDateCompare { Before = -1, Equal = 0, After = 1 };
bool isLeapYear(short Year)
{
    return (Year % 4 == 0 && Year % 100 != 0) || (Year % 400 == 0);
}
short NumberOfDaysInAMonth(short Month, short Year)
{
    if (Month < 1 || Month>12)
        return  0;
    int days[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
    return (Month == 2) ? (isLeapYear(Year) ? 29 : 28) : days[Month - 1];
}
short NumberOfDaysInYear(short Year)
{
    return  isLeapYear(Year) ? 366 : 365;
}
struct sDate { short Year; short Month; short Day; };
struct sPeriod { sDate StartDate;sDate EndDate; };


short ReadDay()
{
    short Day;
    cout << "\nPlease enter a Day? ";
    cin >> Day;
    return Day;
}
short ReadMonth()
{
    short Month;
    cout << "\nPlease enter a Month? ";
    cin >> Month;

    return Month;
}
short ReadYear()
{
    short Year;
    cout << "\nPlease enter a Year? ";
    cin >> Year;

    return Year;
}
sDate ReadFullDate()
{
    sDate Date;
    Date.Day = ReadDay();
    Date.Month = ReadMonth();
    Date.Year = ReadYear();

    return Date;
}
sPeriod ReadPeriod()
{
    sPeriod Period;
    cout << "\nEnter Start Date:";
    Period.StartDate = ReadFullDate();
    cout << "\nEnter End Date:";
    Period.EndDate = ReadFullDate();

    return Period;
}

bool IsDate1EqualDate2(sDate Date1, sDate Date2)
{
    return  (Date1.Year == Date2.Year) ? ((Date1.Month == Date2.Month) ? ((Date1.Day == Date2.Day) ? true : false) : false) : false;
}
bool IsDate1BeforeDate2(sDate Date1, sDate Date2)
{
    return  (Date1.Year < Date2.Year) ? true : ((Date1.Year == Date2.Year) ? (Date1.Month < Date2.Month ? true : (Date1.Month == Date2.Month ? Date1.Day < Date2.Day : false)) : false);
}
bool IsDate1AfterDate2(sDate Date1, sDate Date2)
{
    return (!IsDate1BeforeDate2(Date1, Date2)) && (!IsDate1EqualDate2(Date1, Date2));
}
enDateCompare CompareDates(sDate Date1, sDate Date2)
{
    if (IsDate1BeforeDate2(Date1, Date2))
        return enDateCompare::Before;

    if (IsDate1EqualDate2(Date1, Date2))
        return enDateCompare::Equal;

    ///this is faster
    return enDateCompare::After;
}
bool IsLastDayInMonth(sDate Date)
{

    return (Date.Day == NumberOfDaysInAMonth(Date.Month, Date.Year));
}
bool IsLastMonthInYear(short Month)
{
    return Month == 12;
}
sDate IncreaseDateByOneDay(sDate Date)
{
    if (IsLastDayInMonth(Date))
    {
        if (IsLastMonthInYear(Date.Month))
        {
            Date.Month = 1; Date.Day = 1; Date.Year++;
        }
        else
        {
            Date.Day = 1; Date.Month++;
        }
    }
    else
    {
        Date.Day++;
    }
    return Date;
}
int GetDifferenceInDays(sDate Date1, sDate Date2, bool IncludeEndDay = false)
{
    int Days = 0;
    while (IsDate1BeforeDate2(Date1, Date2))
    {
        Days++;
        Date1 = IncreaseDateByOneDay(Date1);
    }
    return IncludeEndDay ? ++Days : Days;
}

int PeriodLengthInDays(sPeriod Period, bool IncludeEndDate = false)
{
    return GetDifferenceInDays(Period.StartDate, Period.EndDate, IncludeEndDate);
}
bool IsOverlapPeriods(sPeriod Period1, sPeriod Period2)
{
    if (CompareDates(Period2.EndDate, Period1.StartDate) == enDateCompare::Before || CompareDates(Period2.StartDate, Period1.EndDate) == enDateCompare::After)
        return false;
    return true;
}
      //my function
// دالتي ودالة أبو هدهود قد تخئ في بعض الحالاتات في يوم واحد

short CoutOverlapDays_(sPeriod Period1, sPeriod Period2, bool IncludeEndDate = false)
{
    short Days = 0;
     if(IsOverlapPeriods(Period1, Period2))
     {
         if (  (CompareDates(Period1.StartDate, Period2.StartDate) == 1 || CompareDates(Period1.StartDate, Period2.StartDate) == 0) && (CompareDates(Period1.EndDate, Period2.EndDate) == -1  || CompareDates(Period1.EndDate, Period2.EndDate) == 0)  ) 
         {
             Days=PeriodLengthInDays(Period1, IncludeEndDate);  
         }
         else if ((CompareDates(Period2.StartDate, Period1.StartDate) == 1 || CompareDates(Period2.StartDate, Period1.StartDate) == 0) && (CompareDates(Period2.EndDate, Period1.EndDate) == -1 || CompareDates(Period2.EndDate, Period1.EndDate) == 0))
         {
             Days = PeriodLengthInDays(Period2, IncludeEndDate);  
         }
         else if (CompareDates(Period1.EndDate, Period2.EndDate)==-1 && CompareDates(Period2.StartDate, Period1.EndDate) == -1)
         {
             Days = GetDifferenceInDays(Period2.StartDate, Period1.EndDate);
         }
         else if (CompareDates(Period2.EndDate, Period1.EndDate) == -1 && CompareDates(Period1.StartDate, Period2.EndDate) == -1)
         {
             Days = GetDifferenceInDays(Period1.StartDate, Period2.EndDate);
         }
         else
         {
             Days = 1;
         }
         return Days;
     }
     else
     {
         return Days;
     }
}

bool isDateInPeriod(sDate Date, sPeriod Period)
{
    return !(CompareDates(Date, Period.StartDate) == enDateCompare::Before || CompareDates(Date, Period.EndDate) == enDateCompare::After);
}
int CountOverlapDays(sPeriod Period1, sPeriod Period2)
{ 
    int Period1Length = PeriodLengthInDays(Period1, true);
    int Period2Length = PeriodLengthInDays(Period2, true);
    int OverlapDays = 0; 
    
    if (!IsOverlapPeriods(Period1, Period2))
        return 0;
    
    if (Period1Length < Period2Length) 
    {
        while (IsDate1BeforeDate2(Period1.StartDate, Period1.EndDate))
        { 
            if (isDateInPeriod(Period1.StartDate, Period2))    
                OverlapDays++;
            Period1.StartDate = IncreaseDateByOneDay(Period1.StartDate);
        }
    }
    else 
    {
        while (IsDate1BeforeDate2(Period2.StartDate, Period2.EndDate))
        {
            if (isDateInPeriod(Period2.StartDate, Period1)) 
                OverlapDays++; Period2.StartDate = IncreaseDateByOneDay(Period2.StartDate); 
        }
    } 
    return OverlapDays;
}


int main()
{
    cout << "\nEnter Period1:";
    sPeriod Period1 = ReadPeriod();
    cout << "\n\nEnter Period2:";
    sPeriod Period2 = ReadPeriod();

    cout << "\nOverlap Days Count Is: " << CountOverlapDays(Period1, Period2) << endl;
    cout << "\nOverlap Days Count Is: " << CoutOverlapDays_(Period1, Period2) << endl;
    return 0;
}